image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  NAS_DEPLOY_PATH: "/volume1/docker/homeblog"  # NAS의 배포 경로
  DB_USERNAME: "postgres"
  DB_PASSWORD: "postgres"
  DB_DATABASE: "homeblog"

stages:
  - build
  - test
  - deploy

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build
  script:
    # 프론트엔드 빌드
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA -f frontend/Dockerfile frontend/
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    # 백엔드 빌드
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA -f backend/Dockerfile backend/
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
  only:
    - main
    - develop
  tags:
    - blog

test:
  stage: test
  script:
    - cd frontend && npm install && npm run test
    - cd ../backend && npm install && npm run test
  only:
    - main
    - develop
  tags:
    - blog

deploy:
  stage: deploy
  script:
    # NAS 배포 디렉토리로 이동
    - cd $NAS_DEPLOY_PATH
    # 환경 변수 파일 생성
    - |
      cat > .env << EOL
      MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE=${MYSQL_DATABASE}
      MYSQL_USER=${MYSQL_USER}
      MYSQL_PASSWORD=${MYSQL_PASSWORD}
      DATABASE_URL=mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}
      NEXT_PUBLIC_API_URL=http://backend:4000
      EOL
    # 최신
    - docker-compose -f docker-compose.yml pull frontend
    - docker-compose -f docker-compose.yml pull backend
    # 서비스 재시작
    - docker-compose -f docker-compose.yml down
    - docker-compose -f docker-compose.yml up -d
  environment:
    name: production
  only:
    - main
  tags:
    - blog

deploy_staging:
  stage: deploy
  script:
    # NAS 배포 디렉토리로 이동
    - cd $NAS_DEPLOY_PATH
    # 환경 변수 파일 생성
    - |
      cat > .env << EOL
      MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE=${MYSQL_DATABASE}
      MYSQL_USER=${MYSQL_USER}
      MYSQL_PASSWORD=${MYSQL_PASSWORD}
      DATABASE_URL=mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}
      NEXT_PUBLIC_API_URL=http://backend:4000
      EOL
    # 최신 이미지로 업데이트
    - docker-compose -f docker-compose.yml pull frontend
    - docker-compose -f docker-compose.yml pull backend
    # 서비스 재시작
    - docker-compose -f docker-compose.yml down
    - docker-compose -f docker-compose.yml up -d
  environment:
    name: staging
  only:
    - develop
  tags:
    - blog